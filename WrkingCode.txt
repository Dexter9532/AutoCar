#include <Servo.h>
#include <Wire.h>
#include <OPT3101.h>
#include <Arduino.h>

// === PIN-KONFIGURATION ===
#define L_EN 8    
#define R_EN 7   
#define L_PWM 5   
#define R_PWM 6   
#define SERVO_PIN 9

// === OBJEKT ===
Servo steeringServo;
OPT3101 sensor;

// === KONSTANTER ===
const int targetDistance = 500;
const int tolerance = 20;
const int maxDeviation = 200;
const int maxSpeed = 40;
const int minSpeed = 39;

const int servoCenter = 85;            //  JUSTERBART mittläge för servon
const int stuckThreshold = 40;         // mm
const unsigned long stuckTime = 1000;  // ms

// === STUCK-DETEKTION ===
int lastDistance = 0;
unsigned long lastMoveTime = 0;

// === FUNKTION: BAKÅT OCH VRID SERVOT FÖR ATT KOMMA LOSS ===
void recoverFromStuck() {
    Serial.println("⚠️ Fastnat! Försöker backa och vrida...");

    analogWrite(L_PWM, maxSpeed);
    analogWrite(R_PWM, 0);
    steeringServo.write(servoCenter - 25); // styr snett vänster
    delay(700);

    analogWrite(L_PWM, 0);
    analogWrite(R_PWM, 0);
    delay(200);

    steeringServo.write(servoCenter); // återställ till mitten
    delay(200);
}

void setup() {
    Serial.begin(9600);
    Wire.begin();

    sensor.init();
    sensor.configureDefault();

    steeringServo.attach(SERVO_PIN); 
    steeringServo.write(servoCenter);

    pinMode(L_EN, OUTPUT);
    pinMode(R_EN, OUTPUT);
    pinMode(L_PWM, OUTPUT);
    pinMode(R_PWM, OUTPUT);

    digitalWrite(L_EN, HIGH);
    digitalWrite(R_EN, HIGH);

    lastDistance = targetDistance;
    lastMoveTime = millis();
}

void loop() {
    // === MÄT MED OTP3101 ===
    sensor.startSample();
    while (!sensor.isSampleDone()) delay(1);
    sensor.readOutputRegs();
    int distance = sensor.distanceMillimeters;

    Serial.print("Avstånd: ");
    Serial.println(distance);

    // === STUCK-DETEKTION ===
    if (abs(distance - lastDistance) > stuckThreshold) {
        lastMoveTime = millis();
        lastDistance = distance;
    }

    if (millis() - lastMoveTime > stuckTime) {
        recoverFromStuck();
        lastMoveTime = millis();
        return;
    }

    // === FELBERÄKNING OCH STYRNING ===
    int error = targetDistance - distance;
    int angle = servoCenter;

    if (abs(error) < tolerance) {
        angle = servoCenter;
    } else if (error > 0) {
        angle = servoCenter + map(constrain(error, 0, maxDeviation), 0, maxDeviation, 0, 23);
    } else {
        angle = servoCenter - map(constrain(-error, 0, maxDeviation), 0, maxDeviation, 0, 23);
    }

    angle = constrain(angle, 50, 120);
    steeringServo.write(angle);

    // === HASTIGHET ===
    int absError = abs(error);
    absError = constrain(absError, 0, maxDeviation);
    int speed = map(absError, 0, maxDeviation, maxSpeed, minSpeed);
    speed = constrain(speed, minSpeed, maxSpeed);

    analogWrite(R_PWM, speed);
    analogWrite(L_PWM, 0);
}
